#version 430 core

layout(quads) in;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;

uniform float perspectiveFarPlaneDistance;
uniform float logarithmicDepthConstant;
uniform bool useLogarithmicDepth;
uniform bool useElevation;
uniform sampler2DArray elevation;

struct TextureInfo
{
  vec4 layerScaleOffsets[4];
  vec4 extentMinMax[4];
};
// sizeof(TextureInfo) is 128 bytes with std140

// UBO minimum max size should be 16384 bytes, we've assumed 65536
layout(std140) uniform ElevationMappingBlock
{
    TextureInfo info[512]; // At most we can have 65536 / 128 == 512 (16384 / 512) == 128 if we were to strictly follow the GL specs) different textureInfo
} elevationUniformBuffer;

in VertexData {
  flat int indexIntoUBO;
  vec3 color;
  vec2 texCoords;
} vertexIn[];

out VertexData {
  vec3 color;
  vec2 texCoords;
  vec3 eyePosition;
  vec3 worldPosition;
} vertexOut;

out TesselData {
  vec4 patchDistance;
  flat int idxIntoSatelliteTextureInfo;
} tesselOut;

void main(void)
{
    vec4 positionAlongBottomEdge = mix(gl_in[0].gl_Position, gl_in[1].gl_Position, gl_TessCoord.x);
    vec4 positionAlongTopEdge = mix(gl_in[2].gl_Position, gl_in[3].gl_Position, gl_TessCoord.x);
    vec3 position = mix(positionAlongBottomEdge, positionAlongTopEdge, gl_TessCoord.y).xyz;
    vertexOut.color = vertexIn[0].color;
    vertexOut.texCoords = vec2(gl_TessCoord.x, gl_TessCoord.y);
    tesselOut.patchDistance = vec4(gl_TessCoord.x, gl_TessCoord.y, 1 - gl_TessCoord.x, 1.0 - gl_TessCoord.y);

    // Build the view matrix relative to the eye (that is with the eye in 0, 0, 0)
    mat4 viewMatrixRTE = viewMatrix;
    viewMatrixRTE[3] = vec4(0.0, 0.0, 0.0, viewMatrix[3][3]);

    vec3 displacementVec = vec3(0.0);
    if (useElevation) {
        TextureInfo elevationInfo = elevationUniformBuffer.info[vertexIn[0].indexIntoUBO];
        vec4 heightInfo = vec4(0.0);

        for (int i = 0; i < 4; ++i) {
            float layer = elevationInfo.layerScaleOffsets[i].x;
            if (layer >= 0.0) {
                float scale = elevationInfo.layerScaleOffsets[i].y;
                vec2 offset = elevationInfo.layerScaleOffsets[i].zw;
                vec3 texCoords = vec3(vec2(gl_TessCoord.x, gl_TessCoord.y) * scale + offset, layer);
                vec4 color = texture(elevation, texCoords);

                // We need alpha to be 0 when the texture coordinates are beyond
                // or below the extent of the image
                // step -> 0.0 is returned if x[i] < edge[i], and 1.0 is returned otherwise
                vec2 stepMin = step(elevationInfo.extentMinMax[i].xy, texCoords.xy);
                vec2 stepMax = step(vec2(0, 0), texCoords.xy - elevationInfo.extentMinMax[i].zw);
                float alpha = stepMin.x * stepMin.y * stepMax.x * stepMax.y;

                heightInfo += vec4(color.rgb, color.a * alpha);
            }
        }

        // Displace vertex based on elevation information
        // Normal from earth center to position is O (0, 0, 0) A (position)
        // so N = normalize(A - O) == normalize(A)
        displacementVec = normalize(position) * ((heightInfo.r * 256.0 + heightInfo.g + heightInfo.b / 256.0) - 32768.0);
    }

    vertexOut.eyePosition = (viewMatrixRTE * vec4(position + displacementVec, 1.0)).xyz;
    gl_Position = projectionMatrix * viewMatrixRTE * vec4(position + displacementVec, 1.0);


    // All vertices of a same patch have the same indexIntoUBO
    tesselOut.idxIntoSatelliteTextureInfo = vertexIn[0].indexIntoUBO;

    if (useLogarithmicDepth) {
       // Logarithmic Depth
       gl_Position.z = ((2.0 * log(logarithmicDepthConstant * gl_Position.z + 1.0) /
                         log(logarithmicDepthConstant * perspectiveFarPlaneDistance + 1.0)) - 1.0) * gl_Position.w;
    }
}
